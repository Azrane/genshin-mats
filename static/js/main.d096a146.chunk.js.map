{"version":3,"sources":["components/CharactersPage.jsx","components/TalentsPage.jsx","components/WeaponsPage.jsx","components/MaterialsPage.jsx","App.js","serviceWorker.js","index.js"],"names":["characterLevels","CharactersPage","props","className","Object","values","characters","map","character","key","name","src","process","alt","level","Fragment","type","value","id","htmlFor","TalentsPage","WeaponsPage","MaterialsPage","stage","App","materials","entries","forEach","element","Characters","elemental","Materials","specialty","i","Stages","crystal","crystal_stg","common","common_stg","hasOwnProperty","crystal_qty","elemental_qty","specialty_qty","common_qty","mora","console","log","to","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d096a146.chunk.js","sourcesContent":["import React from 'react';\nimport \"./CharactersPage.css\";\n\nlet characterLevels = [1,2,3,4,5,6]\n\nfunction CharactersPage(props) {\n    return (\n    <div className=\"character-list\">\n        {\n          Object.values(props.characters).map(character => (\n            <div key={character.name} className=\"character-portrait\">\n              <img className=\"character-icon\" src={process.env.PUBLIC_URL + '/images/characters/' + character.name + '.png'} alt={character.name}/>\n              <div className=\"star-level\">\n                {\n                  characterLevels.map(level => (\n                    <React.Fragment key={level}>\n                      <input type=\"radio\" name={character.name} value={level} id={character.name + \"\" + level}></input>\n                      <label htmlFor={character.name + \"\" + level}></label>\n                    </React.Fragment>\n                  ))\n                }\n              </div>\n              <label className=\"character-name\">{character.name}</label>\n            </div>\n          ))\n        }\n    </div>\n    )\n}\n\nexport default CharactersPage","import React from 'react';\nimport \"./TalentsPage.css\";\n\nfunction TalentsPage() {\n    return (\n        <h1>Talents</h1>\n    )\n}\n\nexport default TalentsPage","import React from 'react';\nimport \"./WeaponsPage.css\";\n\nfunction WeaponsPage() {\n    return (\n        <h1>Weapons</h1>\n    )\n}\n\nexport default WeaponsPage","import React from 'react';\nimport \"./MaterialsPage.css\";\n\nfunction MaterialsPage() {\n    return (\n        <h1>Materials</h1>\n    )\n}\n\nexport default MaterialsPage","import React from 'react';\nimport { Route, NavLink, HashRouter } from \"react-router-dom\";\nimport Stages from './data/stages.json';\nimport Characters from './data/characters.json';\nimport Materials from './data/materials.json';\n\nimport './App.css';\nimport CharactersPage from './components/CharactersPage';\nimport TalentsPage from './components/TalentsPage';\nimport WeaponsPage from './components/WeaponsPage';\nimport MaterialsPage from './components/MaterialsPage';\n\nlet characters = {\n  \"amber\": {\n    stage: 5\n  },\n  \"kaeya\": {\n    stage: 5\n  },\n  \"lisa\": {\n    stage: 5\n  }\n}\n\nfunction App() {\n  let materials = {};\n  Object.entries(characters).forEach(([key, value]) => {\n    const element = Characters[key].type;\n    const elemental = Materials[element + '_elemental'].name;\n    const specialty = Materials[Characters[key].specialty].name;\n    for (let i = value.stage; i < 6; i++) {\n      let stage = Stages.characters[i];\n      const crystal = Materials[element + '_crystal_' + stage.crystal_stg].name;\n      const common = Materials[Characters[key].common + '_' + stage.common_stg].name;\n      materials[crystal] = materials.hasOwnProperty(crystal) ? materials[crystal] + stage.crystal_qty : stage.crystal_qty;\n      materials[elemental] = materials.hasOwnProperty(elemental) ? materials[elemental] + stage.elemental_qty : stage.elemental_qty;\n      materials[specialty] = materials.hasOwnProperty(specialty) ? materials[specialty] + stage.specialty_qty : stage.specialty_qty;\n      materials[common] = materials.hasOwnProperty(common) ? materials[common] + stage.common_qty : stage.common_qty;\n      materials.mora = materials.hasOwnProperty('mora') ? materials.mora + stage.mora: stage.mora\n    }\n  });\n  console.log(materials);\n  return (\n    <HashRouter>\n      <div>\n        <nav className=\"navbar\">\n          <ul>\n            <li><NavLink to=\"/\">Characters</NavLink></li>\n            <li><NavLink to=\"/Talents\">Talents</NavLink></li>\n            <li><NavLink to=\"/Weapons\">Weapons</NavLink></li>\n            <li><NavLink to=\"/Materials\">Materials</NavLink></li>\n          </ul>\n        </nav>\n        <div className=\"content\">\n          <Route exact path=\"/\" render={() => (<CharactersPage characters={Characters}></CharactersPage>)}></Route>\n          <Route path=\"/Talents\" component={TalentsPage}></Route>\n          <Route path=\"/Weapons\" component={WeaponsPage}></Route>\n          <Route path=\"/Materials\" component={MaterialsPage}></Route>\n        </div>\n        {/* <div>\n        {\n          Object.values(Materials).map(material => (\n            <img key={material.name} width=\"45\" height=\"45\" src={process.env.PUBLIC_URL + '/images/materials/' + material.name.replaceAll(' ', '_').toLowerCase() + '.png'} alt={material.name}/>\n          ))\n        }\n        </div> */}\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}